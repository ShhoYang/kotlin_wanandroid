package com.hao.library.compiler;

import com.google.auto.service.AutoService;
import com.hao.library.annotation.*;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

/**
 * @author Yang Shihao
 */
@AutoService(Processor.class)
public class LibraryProcessor extends AbstractProcessor {

    private Filer filer;
    private Messager messager;
    private Elements elementUtils;
    private Types typeUtils;
    private Map<String, String> options;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        filer = processingEnv.getFiler();
        messager = processingEnv.getMessager();
        elementUtils = processingEnv.getElementUtils();
        typeUtils = processingEnv.getTypeUtils();
        options = processingEnv.getOptions();
    }


    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> set = new HashSet<>();
        set.add(AndroidEntryPoint.class.getCanonicalName());
        return set;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

        AnnotationFieldFeatureSet packageNameSet = new AnnotationFieldFeatureSet(roundEnv, options);
        // 类的集合
        Set<TypeElement> elements = getTypeElementsByAnnotationType(annotations, roundEnv);

        for (TypeElement typeElement : elements) {
            AnnotationMeta annotationMeta = new AnnotationMeta(elementUtils, typeUtils, packageNameSet, typeElement);

            ClassName className = ClassName.get(annotationMeta.getPackageName(), annotationMeta.getAnnotatedClassName());

            MethodSpec.Builder staticMethodBuilder = MethodSpec.methodBuilder(DaggerConstant.STATIC_METHOD_NAME)
                    .addModifiers(Modifier.PUBLIC)
                    .addModifiers(Modifier.STATIC)
                    .returns(TypeName.VOID)
                    .addParameter(className, AnnotationMeta.PARAMS_NAME_ACTIVITY);


            List<Field> fieldList = annotationMeta.getFieldList();
            for (Field field : fieldList) {
                String annotationType = field.getAnnotationType();
                String filedName = field.getFiledName();
                String filedType = field.getFiledType();
                if (InjectViewBinding.class.getCanonicalName().equals(annotationType)) {
                    staticMethodBuilder.addStatement(
                            "$N.$N = $N.inflate($N.getLayoutInflater())",
                            AnnotationMeta.PARAMS_NAME_ACTIVITY,
                            filedName,
                            filedType,
                            AnnotationMeta.PARAMS_NAME_ACTIVITY);

                } else if (InjectViewModel.class.getCanonicalName().equals(annotationType)) {
                    staticMethodBuilder.addStatement(
                            "$N.$N = new androidx.lifecycle.ViewModelProvider($N).get($N.class)",
                            AnnotationMeta.PARAMS_NAME_ACTIVITY,
                            filedName,
                            AnnotationMeta.PARAMS_NAME_ACTIVITY,
                            filedType
                    );
                } else {
                    staticMethodBuilder.addStatement(
                            "$N.$N = new $N()",
                            AnnotationMeta.PARAMS_NAME_ACTIVITY,
                            filedName,
                            filedType
                    );
                }
            }
            // 生成类
            TypeSpec.Builder typeBuild = TypeSpec.classBuilder(annotationMeta.getGenerateClassName())
                    .addJavadoc("Generated by Library")
                    .addModifiers(Modifier.PUBLIC);

            typeBuild.addMethod(staticMethodBuilder.build());

            try {
                JavaFile.builder(annotationMeta.getPackageName(), typeBuild.build()).build().writeTo(filer);
            } catch (Exception e) {
                messager.printMessage(Diagnostic.Kind.ERROR, e.getMessage(), typeElement);
            }
        }
        return true;
    }

    /**
     * 获取被注解的类
     */
    private Set<TypeElement> getTypeElementsByAnnotationType(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        Set<TypeElement> typeElements = new HashSet<>();
        Set<? extends Element> elements = roundEnv.getRootElements();
        for (Element element : elements) {
            if (element instanceof TypeElement) {
                boolean found = false;
                for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
                    for (TypeElement annotation : annotations) {
                        if (annotationMirror.getAnnotationType().asElement().equals(annotation)) {
                            typeElements.add((TypeElement) element);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
        }
        return typeElements;
    }
}
